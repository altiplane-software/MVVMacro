version: 2.1

jobs:
  build-development:
    macos:
      xcode: "16.2.0"
    steps:
    - checkout
    - run:
        name: Build and Test (Development)
        command: |
          swift build
          swift test

  build-production:
    macos:
      xcode: "16.2.0"
    steps:
    - checkout
    - run:
        name: Build and Test (Production)
        command: |
          export MVVMACRO_PRODUCTION=1
          swift build -c release
          swift test
    - run:
        name: Create XCFramework
        command: |
          # Create Artifacts directory if it doesn't exist
          mkdir -p Artifacts
          
          # Build the macro as a library
          swift build -c release
          
          # Create the XCFramework directly from the built products
          # This approach builds and packages a binary Swift package plugin
          swift package --allow-writing-to-directory ./Artifacts \
            archive \
            --output-directory ./Artifacts \
            --archive-product MVVMacroImpl
            
          # Rename the resulting .zip to our expected XCFramework name
          mv ./Artifacts/MVVMacroImpl.zip ./Artifacts/MVVMacroImpl.xcframework.zip
          
          # Extract it
          unzip -o ./Artifacts/MVVMacroImpl.xcframework.zip -d ./Artifacts
          
          # Create the expected directory structure
          mkdir -p ./Artifacts/MVVMacroBinary.xcframework
          cp -R ./Artifacts/MVVMacroImpl/* ./Artifacts/MVVMacroBinary.xcframework/
    - persist_to_workspace:
        root: .
        paths:
        - Artifacts/MVVMacroBinary.xcframework

  release:
    macos:
      xcode: "15.3.0"
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Create Release
        command: |
          # Add your release steps here
          # For example, creating a GitHub release with the XCFramework

workflows:
  build-and-test:
    jobs:
    - build-development
    - build-production:
        requires:
        - build-development
    - release:
        requires:
        - build-production
        filters:
          branches:
            only: main
